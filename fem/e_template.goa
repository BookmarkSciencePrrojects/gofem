// Copyright 2015 Dorival Pedroso and Raul Durand. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package fem

import (
	"github.com/cpmech/gofem/inp"
	"github.com/cpmech/gosl/fun"
	"github.com/cpmech/gosl/la"
)

// ElemTemplate implementes a general element to solve the following equation
//     dφ       ∂φ
//     -- + v . -- = s(x)
//     dt       ∂x
type ElemTemplate struct {
}

// initialisation ///////////////////////////////////////////////////////////////////////////////////

// register element
func init() {

	// information allocator
	infogetters["template"] = func(cellType string, faceConds []*FaceCond) *Info {

		// new info
		var info Info

		// return information
		return &info
	}

	// element allocator
	eallocators["template"] = func(cellType string, faceConds []*FaceCond, cid int, edat *inp.ElemData, x [][]float64) Elem {

		// basic data
		var o ElemTemplate

		// return new element
		return &o
	}
}

// implementation ///////////////////////////////////////////////////////////////////////////////////

// Id returns the cell Id
func (o *ElemTemplate) Id() int {
	return 0
}

// SetEqs set equations
func (o *ElemTemplate) SetEqs(eqs [][]int, mixedform_eqs []int) (ok bool) {
	return true
}

// SetEleConds set element conditions
func (o *ElemTemplate) SetEleConds(key string, f fun.Func, extra string) (ok bool) {
	return true
}

// InterpStarVars interpolate star variables to integration points
func (o *ElemTemplate) InterpStarVars(sol *Solution) (ok bool) {
	return true
}

// AddToRhs adds -R to global residual vector fb
func (o *ElemTemplate) AddToRhs(fb []float64, sol *Solution) (ok bool) {
	return true
}

// AddToKb adds element K to global Jacobian matrix Kb
func (o *ElemTemplate) AddToKb(Kb *la.Triplet, sol *Solution, firstIt bool) (ok bool) {
	return true
}

// Update perform (tangent) update
func (o *ElemTemplate) Update(sol *Solution) (ok bool) {
	return true
}

// internal variables ///////////////////////////////////////////////////////////////////////////////

// Ipoints returns the real coordinates of integration points [nip][ndim]
func (o *ElemTemplate) Ipoints() (coords [][]float64) {
	return
}

// SetIniIvs sets initial ivs for given values in sol and ivs map
func (o *ElemTemplate) SetIniIvs(sol *Solution, ivs map[string][]float64) (ok bool) {
	return true
}

// BackupIvs create copy of internal variables
func (o *ElemTemplate) BackupIvs(aux bool) (ok bool) {
	return true
}

// RestoreIvs restore internal variables from copies
func (o *ElemTemplate) RestoreIvs(aux bool) (ok bool) {
	return true
}

// Ureset fixes internal variables after u (displacements) have been zeroed
func (o *ElemTemplate) Ureset(sol *Solution) (ok bool) {
	return true
}

// writer ///////////////////////////////////////////////////////////////////////////////////////////

// Encode encodes internal variables
func (o *ElemTemplate) Encode(enc Encoder) (ok bool) {
	return true
}

// Decode decodes internal variables
func (o *ElemTemplate) Decode(dec Decoder) (ok bool) {
	return true
}

// OutIpsData returns data from all integration points for output
func (o *ElemTemplate) OutIpsData() (data []*OutIpData) {
	return
}
